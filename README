This is Maria Coleman and Farrah Lin's final project for CS120 SP17.

yup
*********************************************************************
TEAM:
Maria Coleman mcolem31
Farrah Lin flin27

Sara's T/Th section

*********************************************************************
SPECIAL INSTRUCTIONS:
If using Putty, please change your text font to be 24 or larger so the chess board is easier to see.

Part of the chess pieces may look a little cut off at the end becasue the unicode chess characters are a wide, depending on your font. This happens due to the pitch of the font, and thus, fonts with larger pitch will let you see more of the piece.
Pieces might show up the best in an Arial font.

We've included a jpeg of what the board looks to us with Putty's default Courier New font: visualBoard.JPG

Castling is implemented.

*********************************************************************
DESIGN:

To determine which moves were valid, we made a class inbetween pieces and the chess specific pieces called ChessPieces. This class included more functions like properAloneMove and noPeopleInWay to determine if for each specific chess piece, it was a proper move based only on its movement patterns, disregarding if there are pieces in the way, and if pieces are in the way for everything except the knight.

properAloneMove then called upon virtual functions that determined if the move was in the proper direction proper spaces for each piece. Also, because we had functions to get the direction and the spaces of a move, it was easy to implement which were proper for each piece. If it was not proper, we knew in what way it was not proper.

To check if a move would put the opponent in check, we made a function called isCheckedPosition that takes in the position of a king, and checks if that king is in check. It would then go through all the pieces of the player whose king is not being tested, and see if there is a valid move to get to the king.

To check if a move would put the opponent in checkmate, we made a function called isUnderCheckMate that takes in a player. It goes through the player's pieces, see's if a move will take the player out of check (and undos the move if it does not).

Therefore, in the makeMove functions, it would check for checked, checkmate, and stalemate conditions after the move was made, but before returning success or error codes.


*********************************************************************
COMPLETENESS:
No major errors as far as we know. 


*********************************************************************
TESTS:

END TO END:
1: case insensitive, black checkmates white aka foolsmate from wikipedia
2: white checkmates black
3: white checks black, checks output for forfeit, cannot parse your move 
4: goes into a stalemate
5: white checkmates black, also tests that pawns get upgraded to queens
6: valid castling, white does short castling and black does long castling.
7: invalid castling/illegal move, trying to castle after the white king has moved
8: invalid castling/illegal move, trying to castle after the white rook has moved
9: invalid castling/illegal move, trying to castle when pieces are in the way
10: must handle check, trying to move when the king is already in check
11: can't expose king to a check
12: invalid castling, trying to castle while king is in check
13: invalid castling, trying to castle when king would be in check after landing
14: invalid castling, king moves through a square attacked by an opponent
15: black checks white
16: captures pieces output

UNIT TEST:
unittest runs as ./unittest, but the file it compiles is called test_chess
It tests all the valid and invalid movement patterns for each of the piece types, including blocked pieces, capturing, etc.

newGameIsNotOver asserts that a newly started, standard game is not over.
invalidNoPiece asserts that you can't move a piece that you don't have
offBoard asserts that you can't ask the game to move pieces on positions not on the board
BlockedPiece asserts that you can't move your piece to a position occupied by your piece
validMovesCapturePawn asserts that pawns can move diagonally to capture something
validMovesCaptureUsingAnythingElse asserts that you can capture using anything else (king used as ex)
validMovesLonelyPawn asserts that pawns on their starting position can move 2 up, and anything else that is valid for normal pawns, but can't move in a way that's invalid
validMovesLonely*** asserts that each type of piece cannot move in a way that's invalid, and can move ina way that's valid.



NOTE: a bunch of positions are declared as global because we wanted to keep reusing them in the valid moves tests. We had them redeclared in each validmove test function, but wanted to make it cleaner. We tried to declare them as instance variables inside the test_chess class, but it kept giving me errors so Adrianna told us just to put it outside the class entirely. 





EXTRA CREDIT: CASTLING
I asked multiple ta's without a clear response on what classifies the player trying to make a castling move. I assume it needs to be 2 spaces towards a rook with no pieces in between and that neither has moved before. 


